version: 0.2

phases:
  install:
    runtime-versions:
      docker: 18
    commands:
      # Remove php 7.3
      - php -i
      - whereis php
      - apt-get remove -y "php*"
      - apt-get remove -y --purge "php*"
      - apt-get purge -y php-cli
      - apt-get purge -y --auto-remove php-cli
      # Enable universe repository
      - apt-get install software-properties-common
      - apt-add-repository universe
      - apt-get update
      # Install python and pip
      - apt-get install -y python3.6 python3-pip
      - pip install --upgrade pip
      - pip install -r requirements.txt
      - curl -sL https://deb.nodesource.com/setup_6.x | bash -
      - apt-get install -y curl git build-essential curl nodejs language-pack-en-base
      # Install php 7.2
      - php --version
      - LC_ALL=C.UTF-8 add-apt-repository -y ppa:ondrej/php
      - apt-get update
      - apt-get install -y php7.2-common php7.2-cli php7.2-curl php7.2-mongodb php-mongodb php7.2-dev libpcre3 libpcre3-dev php-pear php7.3-common- php7.3-xml-
      - pecl install mongodb
      # Install PHP composer
      - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
      - php composer-setup.php --install-dir=/usr/local/bin --filename=composer
      - echo Debug $AWS_DEFAULT_REGION $IMAGE_REPO_NAME $AWS_ACCOUNT_ID
#      - echo "extension=mongodb.so" >> /etc/php/7.3/cli/php.ini
      # Prep files
      - aws s3 sync s3://brixon-code/php-lib-scr /tmp/php-lib-scr
      - aws s3 sync s3://brixon-code/frontender.platform-core.v1 /tmp/frontender.platform-core
      - ls /tmp/php-lib-scr
      - ls /tmp/frontender.platform-core
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
  build:
    commands:
      - echo Build started on `date`
      - ls /tmp/php-lib-scr
      - cp source/projects/main/composer-aws.json source/projects/main/composer.json
      - npm install
      - npm install gulp-cli -g
      - npm install natives@1.1.6
      - gulp test --main
      - gulp production --main
      - cp Dockerfile build
      - cp aws-start.sh build
      - cp .htaccess build
      - cd build/main
      - composer install
      - cd ..
      - echo Building the Docker image...
      - IMAGE_TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION |cut -c 1-7)--$(echo $CODEBUILD_BUILD_ID |sed 's/.*://')"
      - echo Tagging with $IMAGE_TAG
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      - echo Build completed on `date`
      - cd ..
      - chmod +x buildconfig.sh
      - ./buildconfig.sh
      - echo Cfn build started on `date`
      - cd tropo
      - python service.py > ../${IMAGE_REPO_NAME}-service.json.tmp
      - cd ..
      - echo Build completed on `date`

  post_build:
    commands:
      - echo Pushing the Docker image and renaming template...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      - mv ${IMAGE_REPO_NAME}-service.json.tmp ${IMAGE_REPO_NAME}-service.template

artifacts:
  files:
    - 'scr-platform-v2-service.template'
    - 'UAT-config.json'
    - 'PROD-config.json'
    - 'imageconfig.json'
