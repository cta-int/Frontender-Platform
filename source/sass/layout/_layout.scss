/*
Layout

Two- or three-column layout â€“ |Aside|Main|Aside. Aside columns are optional and can be omitted for a two- or single-column layout.

.layout - Full width accross viewports
.layout.layout--reverse - Reverses container ordering on smallest viewports, is used for source ordering
.layout.layout--even - Spreads columns evenly
.layout.layout--split - A larger left and smaller right column
.layout.layout--align-middle - Align content vertically centered
.layout.layout--align-end - Align content to flex end (bottom or right depending on flex direction)
.layout.layout--narrow - Narrows the content

markup:
<div class="{$modifiers}">
  <div class="layout__cell layout__cell--aside">
    Sidebar 1
  </div>
  <div class="layout__cell">
    Main ({$modifiers})
  </div>
  <div class="layout__cell layout__cell--aside">
    Sidebar 2
  </div>
</div>

Styleguide 2.1
*/
/*
 * 1. Allow containers to shrink and grow
 */
// scss-lint:disable NestingDepth

.layout {
    display: flex;
    flex-wrap: wrap;

    .no-flexbox & {
        display: block;
        @extend .clear !optional;
    }

    &__cell {
        flex: 1 1 100%;
        max-width: 100%;

        .no-flexbox & {
            width: 100%;
        }
    }

    &--reverse {
        flex-direction: row-reverse;
    }

    &--wide,
    &__stretch {
        flex: 0 0 100%;

        .no-flexbox & {
            width: 100%;
        }
    }

    &--even {
        /* No styling until gt-medium-handheld */
    }

    &--split {
        /* No styling until gt-medium-handheld */
    }

    &--align-middle {
        align-items: center;
    }

    &--align-end {
        align-items: flex-end;
    }
    @include breakpoint($gt-medium-handheld) {
        &--even {
            flex-wrap: nowrap;
        }

        &--even &__cell {
            flex: 0 0 50% !important;
            max-width: 50% !important;

            .no-flexbox & {
                width: 50% !important;
            }
        }

        &__cell {
            .no-flexbox & {
                float: left;
            }
        }

        .no-flexbox & {
            &--reverse > .layout__cell:first-child {
                float: right;
                width: percentage(13 / 18);
            }

            & > .layout__cell:first-child:not(:last-child) {
                width: percentage(13 / 18);
            }

            & > .layout__cell--aside:first-child:not(:last-child) {
                width: percentage(5 / 18);
            }
        }
    }
    @include breakpoint($gt-large-handheld) {
        &--narrow {
            margin-left: percentage(2 / 12);
            margin-left: 2 / 12 * 100vw;
            margin-right: percentage(2 / 12);
            margin-right: 2 / 12 * 100vw;
        }
    }
    @include breakpoint($gt-small-desktop) {
        flex-wrap: nowrap;
        &--even {
            flex-wrap: wrap;
        }

        &--narrow {
            margin-left: percentage(3 / 18);
            margin-left: 3 / 18 * 100vw;
            margin-right: percentage(3 / 18);
            margin-right: 3 / 18 * 100vw;
            &-s {
                margin-left: percentage(2 / 18);
                margin-left: 2 / 18 * 100vw;
                margin-right: percentage(2 / 18);
                margin-right: 2 / 18 * 100vw;
            }
        }

        &__cell {}

        .no-flexbox &__cell {
            .layout {
                &__cell:first-child:not(:last-child) {
                    width: percentage(8 / 13);
                }

                &__cell--aside {
                    width: percentage(5 / 13);
                }
            }
        }
        &--split {
            .no-flexbox & {
                display: table;
                .layout__cell:first-child:not(:last-child) {
                    width: percentage(9 / 18);
                }
                .layout__cell {
                    display: table-cell;
                    float: none;
                    width: percentage(9 / 18);
                }
            }
        }

        &__cell--aside {
            flex: 0 0 5 / 18 * 100vw;
            max-width: 5 / 18 * 100vw;

            .layout--narrow & {
                flex-basis: 3 / 18 * 100vw;
                max-width: 3 / 18 * 100vw;
            }

            .panel__body .layout & {
                flex: 0 0 percentage(5 / 18);
                max-width: percentage(5 / 18);
            }

            .no-flexbox & {
                width: percentage(5 / 18);
            }
        }

        // &__cell--aside--l {
        //     .layout--narrow & {
        //         flex-basis: 3 / 18 * 100vw;
        //     }
        // }

        .no-flexbox & {
            &--split > .layout__cell:first-child:not(:last-child) {
                width: percentage(10 / 18);
            }
        }

        &--split &__cell--aside {
            flex-basis: 8 / 18 * 100vw;
            max-width: 8 / 18 * 100vw;

            .layout--narrow & {
                flex-basis: 4 / 18 * 100vw;
                max-width: 4 / 18 * 100vw;
            }

            .no-flexbox & {
                width: percentage(8 / 18);
            }
        }

        &__cell--aside + &__cell,
        &__cell:first-child:last-child {
            flex-basis: 8 / 18 * 100vw;
            max-width: 8 / 18 * 100vw;

            .no-flexbox & {
                width: percentage(8 / 18);
            }
        }

        &__cell:first-child:last-child {
            margin-left: auto;
            margin-right: auto;

            .no-flexbox & {
                position: relative;
                left: percentage(5 / 18);
            }
        }

        &__cell--aside + &__cell:last-child {
            flex-basis: 13 / 18 * 100vw;
            max-width: 13 / 18 * 100vw;

            .no-flexbox & {
                width: percentage(13 / 18);
            }
        }

        &__cell &__cell--aside {
            flex-basis: 5 / 18 * 100vw;
            max-width: 5 / 18 * 100vw;
            .panel__body & {
                flex: 0 0 percentage(5 / 18);
                max-width: percentage(5 / 18);
            }
            .no-flexbox & {
                width: percentage(5 / 13);
            }
        }

        // &__cell &__cell--aside--l {
        //     flex-basis: 5 / 18 * 100vw;
        // }

        &__cell &__cell--aside,
        &__cell--aside,
        &__cell--aside + &__cell,
        &__cell--aside + &__cell:last-child,
        &__cell:first-child:last-child,
        &__cell:first-child:last-child {
            .no-flexbox & {
                display: inline-block;
                float: left;
            }
        }

        &__cell--divider {
            &,
            &-outside,
            &-inside,
            &-middle {
                position: relative;
                &::after {
                    content: "";
                    display: block;
                    position: absolute;
                    top: 0;
                    right: 0;
                    bottom: 0;
                    width: 1px;
                    background-color: mix($color-green, $white, 26%);
                }
                @each $color_name, $color_value in $colours {
                    .theme--#{$color_name} &::after {
                        background-color: mix($color_value, $white, 26%);
                    }
                }
                &.well:not(.well--full),
                .well:not(.well--full) & {
                    .theme &::after,
                    &::after {
                        background-color: $white;
                    }
                }
            }
        }
    }
    @include breakpoint($gt-medium-desktop) {
        &__cell--divider {
            &::after,
            &-inside::after {
                transform: translateX( gutter(-.5) );
            }
            &-outside::after {
                transform: translateX( gutter(.5) );
            }
        }
        &__cell--divider-middle::after,
        &--even &__cell--divider::after {
            transform: none;
        }
    }
}
// scss-lint:enable NestingDepth
/*
Layout example, two-column with left sidebar

| Sidebar | Main |

.layout - Full width accross viewports
.layout.layout--reverse - Reverses container ordering on smallest viewports, is used for source ordering

markup:
<div class="{$modifiers}">
  <div class="layout__cell layout__cell--aside">
    Sidebar
  </div>
  <div class="layout__cell">
    Main
  </div>
</div>

Styleguide 2.1.1
*/
/*
Layout example, two-column with right sidebar

| Main | Sidebar |

.layout - Full width accross viewports
.layout.layout--reverse - Reverses container ordering on smallest viewports, is used for source ordering

markup:
<div class="{$modifiers}">
  <div class="layout__cell">
    Main
  </div>
  <div class="layout__cell layout__cell--aside">
    Sidebar
  </div>
</div>

Styleguide 2.1.2
*/
/*
Layout example, narrow single-column

| Main |

.layout - Full width accross viewports (added well class to cell for visibility in this example)

markup:
<div class="{$modifiers}">
  <div class="layout__cell well">
    Main
  </div>
</div>

Styleguide 2.1.3
*/
/*
Example of a nested Layout

Layouts can be nested for more complex layouts

markup:
<div class="layout layout--reverse">
  <div class="layout__cell layout__cell--aside">
    Sidebar
  </div>
  <div class="layout__cell layout__cell--main layout layout--reverse">
    <div class="layout__cell layout__cell--main">
      Main
    </div>
    <div class="layout__cell layout__cell--aside">
      Sidebar
    </div>
  </div>
</div>

Styleguide 2.1.4
*/
